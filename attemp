class Solution {
public:
    int lctOfBrace(int a, string s){ // a is lct of '{'
        int count = 0;
        int ans;
        for (int i = a + 1; i < s.length(); i++){
            if (s[i] == '{') count++;
            else if (s[i] == '}') {
                if (count != 0) count--;
                else {
                    ans = i;
                    break;
                }
            }
        }
        return ans;
    }
    int findLctBraceMultiply(int a; vector<string> str){ // return the lct of }
        int count = 0; 
        int size = str.size();
        int ans;
        for (int i = a + 1; i < size; i++){
            if (str[i] == '{') count++;
            else if (str[i] == '}') count--;
            else if (str[i] == ',' && count == 0) ans = i - 1;
        }
        return ans;
    }
    int multiply()

    vector<string> braceExpansionII(string s) {
        vector<string> ans;
        int len = s.length();
        //make it compact as possible ({{a,z},a{b,c},{ab,z}} => {a,z,a{b,c},ab,z})
        vector<string> str;
        string s0;
        s0 = s[0];
        str.push_back(s0);
        for (int i = 1; i < len; i++){
            if (s[i] == '{'){
                if (s[i - 1] == '{' || s[i - 1] == ','){
                    int lct = lctOfBrace(i, s);
                    s.erase(lct, 1);
                    len -= 1;
                }
                else {
                    string st;
                    st = s[i];
                    str.push_back(st);
                }
            }
            else {
                string st;
                st = s[i];
                str.push_back(st);
            }
           
        }
        // step2: a{b,c}{d,e}f{g,h}") = {"abdfg", "abdfh", "abefg", "abefh", "acdfg", "acdfh", "acefg", "acefh"}
        int size = str.size();
        vector<string> str2;
        vector<vector <string>> multiply;
        for (int i = 1; i < size; i++){
            if (str[i] = ',' || i == 1){
                int count2 = 0;
                for (int j = i + 1; j <= findLctBraceMultiply(i, str); j++){
                    if (str[j] == '{') count2++;
                    else if (str[j] == '}') {
                        if (str[j + 1] != '{' && )
                    }
                }
            }
        }
        
        return str;

        
    }
};
